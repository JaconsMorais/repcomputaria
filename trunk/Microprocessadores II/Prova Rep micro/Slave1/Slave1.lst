CCS PCM C Compiler, Version 4.032, 62930               16-dez-09 23:05

               Filename: C:\Users\Thales\Desktop\Micro\Micro II\Prova Rep micro\Slave1\Slave1.lst

               ROM used: 140 words (2%)
                         Largest free fragment is 2048
               RAM used: 25 (7%) at main() level
                         25 (7%) worst case
               Stack:    2 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   026
0003:  NOP
.................... #include "C:\Users\Thales\Desktop\Micro\Micro II\Prova Rep micro\Slave1\Slave1.h" 
.................... #include <16F876A.h> 
.................... //////// Standard Header file for the PIC16F876A device //////////////// 
.................... #device PIC16F876A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES LP                       //Low power osc < 200 khz 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES WRT_50%                  //Lower half of Program Memory is Write Protected 
....................  
.................... #use delay(clock=20000000) 
0004:  MOVLW  32
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  BCF    0A.3
0018:  BCF    0A.4
0019:  GOTO   023 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... //registrador de leitura e escrita 
.................... #BYTE PORTA_A = 0x05 
.................... #BYTE PORTA_B = 0x06 
.................... #BYTE PORTA_C = 0x07 
....................  
.................... #BYTE TRIS_A = 0x85 
.................... #BYTE TRIS_B = 0x86 // saida de dados 
.................... #BYTE TRIS_C = 0x87 // entrada de dados 
....................  
.................... #byte adresh = 0x1E 
.................... #byte adresl = 0x9E 
.................... #byte adcon0 = 0x1F 
.................... #byte adcon1 = 0x9F 
.................... #byte pir1 = 0x0C 
.................... #byte pie1 = 0x8C 
.................... #byte intcon = 0x8B 
....................  
.................... #bit adon = adcon0.0 
.................... #bit godone = adcon0.2 
.................... #bit adfm = adcon1.7 
....................  
....................  
....................  
....................  
....................  
....................  
.................... void inicia_ad (void){ 
....................  
.................... adcon1 = 0b10000000; 
001A:  MOVLW  80
001B:  BSF    03.5
001C:  MOVWF  1F
.................... adcon0 = 0b00000000; 
001D:  BCF    03.5
001E:  CLRF   1F
.................... adon = 1; 
001F:  BSF    1F.0
....................  
.................... delay_ms(1); 
0020:  MOVLW  01
0021:  MOVWF  32
0022:  GOTO   004
....................  
.................... } 
0023:  BCF    0A.3
0024:  BCF    0A.4
0025:  GOTO   081 (RETURN)
....................  
.................... int16 le_ad (void){ 
....................  
.................... int16 a = 0; 
....................  
.................... godone = 1; 
....................  
.................... while(godone); 
....................  
.................... a = adresh; 
.................... a = a << 8; 
.................... a = a|adresl; 
....................  
.................... return a; 
....................  
.................... } 
....................  
.................... void main() 
.................... { 
0026:  CLRF   04
0027:  BCF    03.7
0028:  MOVLW  1F
0029:  ANDWF  03,F
002A:  MOVLW  81
002B:  BSF    03.5
002C:  MOVWF  19
002D:  MOVLW  A6
002E:  MOVWF  18
002F:  MOVLW  90
0030:  BCF    03.5
0031:  MOVWF  18
0032:  BSF    03.5
0033:  BSF    1F.0
0034:  BSF    1F.1
0035:  BSF    1F.2
0036:  BCF    1F.3
0037:  MOVLW  07
0038:  MOVWF  1C
....................  
....................    float i = 0,iant = 0, pot, duty; 
*
003C:  CLRF   21
003D:  CLRF   22
003E:  CLRF   23
003F:  CLRF   24
0040:  CLRF   25
0041:  CLRF   26
0042:  CLRF   27
0043:  CLRF   28
....................    byte data; 
....................   
....................    setup_adc_ports(NO_ANALOGS); 
0044:  BSF    03.5
0045:  BSF    1F.0
0046:  BSF    1F.1
0047:  BSF    1F.2
0048:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0049:  BCF    03.5
004A:  BCF    1F.0
....................    setup_spi(spi_slave | spi_h_to_l); 
*
0039:  MOVLW  FF
003A:  BCF    03.5
003B:  MOVWF  20
*
004B:  BCF    14.5
004C:  BCF    20.5
004D:  MOVF   20,W
004E:  BSF    03.5
004F:  MOVWF  07
0050:  BCF    03.5
0051:  BSF    20.4
0052:  MOVF   20,W
0053:  BSF    03.5
0054:  MOVWF  07
0055:  BSF    05.5
0056:  BCF    03.5
0057:  BSF    20.3
0058:  MOVF   20,W
0059:  BSF    03.5
005A:  MOVWF  07
005B:  MOVLW  34
005C:  BCF    03.5
005D:  MOVWF  14
005E:  MOVLW  40
005F:  BSF    03.5
0060:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4); 
0061:  MOVF   01,W
0062:  ANDLW  C0
0063:  IORLW  01
0064:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0065:  BCF    03.5
0066:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0067:  MOVLW  00
0068:  MOVWF  78
0069:  MOVWF  12
006A:  MOVLW  00
006B:  BSF    03.5
006C:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
006D:  MOVLW  07
006E:  MOVWF  1C
006F:  MOVF   05,W
0070:  MOVLW  10
0071:  MOVWF  77
0072:  DECFSZ 77,F
0073:  GOTO   072
0074:  NOP
0075:  MOVF   1C,W
0076:  BCF    03.5
0077:  BCF    0D.6
....................    setup_vref(FALSE); 
0078:  BSF    03.5
0079:  CLRF   1D
....................  
....................  
....................  
....................    // TODO: USER CODE!! 
....................     
....................    TRIS_A = 0xFF; 
007A:  MOVLW  FF
007B:  MOVWF  05
....................    TRIS_B = 0xFF; 
007C:  MOVWF  06
....................    TRIS_C = 0b10111111; 
007D:  MOVLW  BF
007E:  MOVWF  07
....................     
....................    inicia_ad(); 
007F:  BCF    03.5
0080:  GOTO   01A
....................  
....................    while(true){ 
....................    /* 
....................     iant = i; 
....................     i = (float)le_ad()/1023; 
....................      
....................      if( spi_data_is_in() ) data = spi_read(); 
....................  
....................      
....................     if(input(PIN_A5) == 0){ 
....................     if(i != iant){ 
....................      pot = i*100/5; 
....................      printf("\r\nPot%cncia do motor: %.3f%%",136,pot); 
....................     } 
....................     }*/ 
....................      
....................     if(input(PIN_A5) == 0)  
0081:  BSF    03.5
0082:  BSF    05.5
0083:  BCF    03.5
0084:  BTFSC  05.5
0085:  GOTO   08A
....................     output_bit(PIN_B1, 0); 
0086:  BCF    06.1
0087:  BSF    03.5
0088:  BCF    06.1
0089:  BCF    03.5
....................      
....................    } 
008A:  GOTO   081
....................     
.................... } 
008B:  SLEEP

Configuration Fuses:
   Word  1: 3938   LP NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD WRT_50%
