
package ELearning.services.client.professor;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2-hudson-752-
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ProfessorService", targetNamespace = "http://services.ELearning/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ProfessorService {


    /**
     * 
     * @param newProfessor
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "cadastrarProfessor", targetNamespace = "http://services.ELearning/", className = "ELearning.services.client.professor.CadastrarProfessor")
    @ResponseWrapper(localName = "cadastrarProfessorResponse", targetNamespace = "http://services.ELearning/", className = "ELearning.services.client.professor.CadastrarProfessorResponse")
    @Action(input = "http://services.ELearning/ProfessorService/cadastrarProfessorRequest", output = "http://services.ELearning/ProfessorService/cadastrarProfessorResponse")
    public boolean cadastrarProfessor(
        @WebParam(name = "newProfessor", targetNamespace = "")
        Professor newProfessor);

    /**
     * 
     * @param professor
     * @return
     *     returns java.util.List<ELearning.services.client.professor.Professor>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "procurarProfessor", targetNamespace = "http://services.ELearning/", className = "ELearning.services.client.professor.ProcurarProfessor")
    @ResponseWrapper(localName = "procurarProfessorResponse", targetNamespace = "http://services.ELearning/", className = "ELearning.services.client.professor.ProcurarProfessorResponse")
    @Action(input = "http://services.ELearning/ProfessorService/procurarProfessorRequest", output = "http://services.ELearning/ProfessorService/procurarProfessorResponse")
    public List<Professor> procurarProfessor(
        @WebParam(name = "professor", targetNamespace = "")
        Professor professor);

    /**
     * 
     * @param newProfessor
     * @param oldProfessor
     * @return
     *     returns ELearning.services.client.professor.Professor
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "editarProfessor", targetNamespace = "http://services.ELearning/", className = "ELearning.services.client.professor.EditarProfessor")
    @ResponseWrapper(localName = "editarProfessorResponse", targetNamespace = "http://services.ELearning/", className = "ELearning.services.client.professor.EditarProfessorResponse")
    @Action(input = "http://services.ELearning/ProfessorService/editarProfessorRequest", output = "http://services.ELearning/ProfessorService/editarProfessorResponse")
    public Professor editarProfessor(
        @WebParam(name = "oldProfessor", targetNamespace = "")
        Professor oldProfessor,
        @WebParam(name = "newProfessor", targetNamespace = "")
        Professor newProfessor);

    /**
     * 
     * @param professor
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deletarProfessor", targetNamespace = "http://services.ELearning/", className = "ELearning.services.client.professor.DeletarProfessor")
    @ResponseWrapper(localName = "deletarProfessorResponse", targetNamespace = "http://services.ELearning/", className = "ELearning.services.client.professor.DeletarProfessorResponse")
    @Action(input = "http://services.ELearning/ProfessorService/deletarProfessorRequest", output = "http://services.ELearning/ProfessorService/deletarProfessorResponse")
    public boolean deletarProfessor(
        @WebParam(name = "professor", targetNamespace = "")
        Professor professor);

}
